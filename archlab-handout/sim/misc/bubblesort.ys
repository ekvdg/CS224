#Ellie Van De Graaff, ellievdg
##include <stdio.h>

#void bubble_sort(int size, int* elements){
#  for(int i = 0; i < size; i++){
#    for(int j = 0; j < size - 1; j++){
#    	    if(*(elements + j) > *(elements + j + 1)){
#	      int temp = *(elements + j);
#	      *(elements+j) = *(elements+j+1);
#	      *(elements+j+1) = temp;
#          }
#     }
#   }
#  for(int i = 0; i < size; i++){
#    printf("%d ", *(elements + i));
#   }
#}

#int main(int argc, char* argv[]){
#  int elements[5] = {5, 6, 1, 8, 2};
#  int size = 5;
#  bubble_sort(size, elements);
#  return 0;
#  }


.pos 0
irmovq	stack, %rsp
call main
halt

.align 8
data:
	.quad	0xa000a000a000
	.quad	0x0b000b000b00
	.quad	0x00c000c000c0
	.quad	0x000d000d000d
	.quad	0x0000e000e000
	.quad	0x00000f000f00

main:
	irmovq	data, %rdi
	irmovq 	$6, %rsi
	call bubble_sort
	ret

bubble_sort:
	rrmovq	%rsi, %r9
	irmovq	$1, %r11
	subq	%r11, %r9
	jmp	first
third:
	rrmovq	%rdi, %rdx
	rrmovq	%rax, %rcx
	irmovq	$8, %r10

loop:
	subq	%r11, %rcx
	jl	other_loop
	addq	%r10, %rdx
	jmp	loop

other_loop:
	mrmovq	(%rdx), %r8
	rrmovq	%rdx, %rsi
	addq	%r10, %rsi
	mrmovq	(%rsi), %rcx
	rrmovq	%rcx, %r10
	subq	%r8, %r10
	jge	second
	rmmovq	%r8, (%rsi)
	rmmovq	%rcx, (%rdx)

second:
	addq	%r11, %rax
	jmp	fourth

fifth:
	xorq	%rax, %rax

fourth:
	rrmovq	%rax, %r10
	subq	%r9, %r10
	jl	third
	subq	%r11, %r9
first:
	jg	fifth

